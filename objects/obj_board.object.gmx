<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy(global.board);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(status == STATUS.promote)
{
    var index = ((mouse_y - board_offset) / board_size) - 2;
    if(mouse_x &gt;= 592 &amp;&amp; mouse_x &lt;= 656 &amp;&amp; index &gt;= 0 &amp;&amp; index &lt; array_height_2d(piece_type))
    {
        //Change the promoted pawn into the selected piece type
        var new_obj = piece_type[index, 0];
        status = STATUS.play;
        with(promoting)
        {
            instance_change(new_obj, false);
            //Now end the pawn's move and check if their new type
            //causes check, stalemate, or checkmate
            event_user(2);
        }
        promoting = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_destroy, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum COLOR
{
    gold,
    silver
}

enum STATUS
{
    play,
    promote,
    stalemate,
    checkmate
}

board_size = 64;
board_offset = 32;
global.board = ds_grid_create(board_size, board_size);
scr_setup_board(global.board, board_size, board_offset);

global.check = false;

global.player_turn = COLOR.silver;
promoting = noone; //Used when promoting a pawn
status = STATUS.play;

//Used for promoting pawns to another piece type
piece_type[0, 0] = obj_queen;
piece_type[0, 1] = spr_queen;
piece_type[1, 0] = obj_rook;
piece_type[1, 1] = spr_rook;
piece_type[2, 0] = obj_knight;
piece_type[2, 1] = spr_knight;
piece_type[3, 0] = obj_bishop;
piece_type[3, 1] = spr_bishop;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var txt;

draw_set_alpha(1);

if(status == STATUS.promote)
{
    //This is a little hackish for when we're promoting...
    draw_sprite(spr_turn, 1 - global.player_turn, 576, board_offset + board_size + ((1 - global.player_turn)*6*board_size));

    draw_set_alpha(0.7);
    for(var yy = 0; yy &lt; array_height_2d(piece_type); yy++)
    {
        draw_sprite(piece_type[yy, 1], promoting.color, 592, board_offset + (yy+2)*board_size);
    }
}
else if(status == STATUS.play)
{
    draw_sprite(spr_turn, global.player_turn, 576, board_offset + board_size + (global.player_turn*6*board_size));
}

if(global.check || status = STATUS.stalemate)
{
    draw_set_color(c_white);
    if(status == STATUS.stalemate)
        txt = "Stale#mate!";
    else if(status == STATUS.checkmate)
        txt = "Check#mate!";
    else
        txt = "Check";
    draw_text(720, 64, txt);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
